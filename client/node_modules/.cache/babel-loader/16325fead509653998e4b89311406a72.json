{"ast":null,"code":"var _jsxFileName = \"/Users/thomasevans/Desktop/code/portfolio/chat-app/client/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport openSocket from 'socket.io-client';\nimport styled from 'styled-components';\nimport Split from 'react-split';\nimport './App.css';\nimport Header from './components/Header';\nimport Chatrooms from './components/Chatrooms/Chatrooms';\nimport Chat from './components/Chat/Chat';\nimport CreateModal from './components/Chatrooms/CreateModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [user, setUser] = useState(null);\n  const [activeRoom, setActiveRoom] = useState();\n  const [messages, setMessages] = useState([]);\n  const [chatrooms, setChatrooms] = useState([]);\n  const [displayCreateModal, setDisplayCreateModal] = useState(false);\n  useEffect(() => {\n    // retrieve username from local storage if exists\n    const username = localStorage.getItem('username');\n    const socket = openSocket('http://localhost:8080'); // TODO - send local storage user from here if possible....?\n    // as well as last chatroom they were in...\n\n    socket.emit('initialize', {\n      user: username\n    }); // retrieve and set chatrooms from server\n\n    socket.on('initialize', data => {\n      setActiveRoom(data.rooms[0]);\n      setChatrooms(data.rooms);\n      setMessages(data.messages);\n    }); // listen for newly created rooms\n\n    socket.on('new room', data => {\n      setChatrooms(data.rooms);\n    }); // listen for newly created messages\n\n    socket.on('new message', data => {\n      console.log(activeRoom);\n      setMessages(data.messages);\n    });\n  }, []);\n  useEffect(() => {\n    console.log(activeRoom);\n  }, [activeRoom]);\n  return /*#__PURE__*/_jsxDEV(AppContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SplitContainer, {\n      sizes: [15, 85],\n      minSize: [140, 800],\n      gutterSize: 4,\n      children: [/*#__PURE__*/_jsxDEV(Chatrooms, {\n        chatrooms: chatrooms,\n        setActiveRoom: setActiveRoom,\n        activeRoom: activeRoom,\n        setDisplayCreateModal: () => {\n          setDisplayCreateModal(!displayCreateModal);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Chat, {\n        activeRoom: activeRoom,\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), displayCreateModal ? /*#__PURE__*/_jsxDEV(CreateModal, {\n      setChatrooms: setChatrooms,\n      chatrooms: chatrooms,\n      setDisplayCreateModal: setDisplayCreateModal\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"FcZMaux2pBXw17d2pTx0E6iPEFc=\");\n\n_c = App;\nexport default App;\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  background-color: black;\n  width: 100%;\n  min-height: 100vh;\n  position: relative;\n`;\n_c2 = AppContainer;\nconst SplitContainer = styled(Split)`\n  display: flex;\n  width: 100%;\n\n  & .gutter {\n    background-color: #202020;\n\n    &:hover {\n      cursor: col-resize;\n    }\n  }\n`;\n_c3 = SplitContainer;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppContainer\");\n$RefreshReg$(_c3, \"SplitContainer\");","map":{"version":3,"sources":["/Users/thomasevans/Desktop/code/portfolio/chat-app/client/src/App.js"],"names":["React","useState","useEffect","openSocket","styled","Split","Header","Chatrooms","Chat","CreateModal","App","user","setUser","activeRoom","setActiveRoom","messages","setMessages","chatrooms","setChatrooms","displayCreateModal","setDisplayCreateModal","username","localStorage","getItem","socket","emit","on","data","rooms","console","log","AppContainer","div","SplitContainer"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport openSocket from 'socket.io-client';\nimport styled from 'styled-components';\nimport Split from 'react-split';\n\nimport './App.css';\nimport Header from './components/Header';\nimport Chatrooms from './components/Chatrooms/Chatrooms';\nimport Chat from './components/Chat/Chat';\nimport CreateModal from './components/Chatrooms/CreateModal';\n\nfunction App() {\n  const [user, setUser] = useState(null);\n  const [activeRoom, setActiveRoom] = useState();\n  const [messages, setMessages] = useState([]);\n  const [chatrooms, setChatrooms] = useState([]);\n\n  const [displayCreateModal, setDisplayCreateModal] = useState(false);\n\n  useEffect(() => {\n    // retrieve username from local storage if exists\n    const username = localStorage.getItem('username');\n    \n    const socket = openSocket('http://localhost:8080');\n\n    // TODO - send local storage user from here if possible....?\n    // as well as last chatroom they were in...\n    socket.emit('initialize', {\n      user: username\n    })\n\n    // retrieve and set chatrooms from server\n    socket.on('initialize', data => {\n        setActiveRoom(data.rooms[0]);\n        setChatrooms(data.rooms);\n        setMessages(data.messages);\n    })\n\n    // listen for newly created rooms\n    socket.on('new room', data => {\n        setChatrooms(data.rooms);\n    })\n\n    // listen for newly created messages\n    socket.on('new message', data => {\n        console.log(activeRoom);\n        setMessages(data.messages);\n    })\n\n  }, [])\n\n  \n  useEffect(() => {\n    console.log(activeRoom)\n  }, [activeRoom])\n\n  return (\n    <AppContainer>\n      <Header />\n      <SplitContainer sizes={[15, 85]} minSize={[140, 800]} gutterSize={4}>\n        <Chatrooms\n          chatrooms={chatrooms}\n          setActiveRoom={setActiveRoom}\n          activeRoom={activeRoom}\n          setDisplayCreateModal={() => {setDisplayCreateModal(!displayCreateModal)}}\n        />\n        <Chat\n          activeRoom={activeRoom}\n          messages={messages}\n        />\n      </SplitContainer>\n      {displayCreateModal ?\n      <CreateModal\n        setChatrooms={setChatrooms}\n        chatrooms={chatrooms}\n        setDisplayCreateModal={setDisplayCreateModal}\n      /> : null}\n    </AppContainer>\n  );\n}\n\nexport default App;\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-wrap: wrap;\n  background-color: black;\n  width: 100%;\n  min-height: 100vh;\n  position: relative;\n`\n\nconst SplitContainer = styled(Split)`\n  display: flex;\n  width: 100%;\n\n  & .gutter {\n    background-color: #202020;\n\n    &:hover {\n      cursor: col-resize;\n    }\n  }\n`"]},"metadata":{},"sourceType":"module"}